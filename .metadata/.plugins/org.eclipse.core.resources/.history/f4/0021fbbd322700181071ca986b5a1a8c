package co.megadodo.hellolwjgl;

import static org.lwjgl.glfw.Callbacks.glfwFreeCallbacks;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.stackPush;
import static org.lwjgl.system.MemoryUtil.NULL;

import java.nio.IntBuffer;

import org.lwjgl.Version;
import org.lwjgl.glfw.GLFWErrorCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.GL11;
//import org.lwjgl.opengl.GL11;
import org.lwjgl.system.MemoryStack;
import org.newdawn.slick.opengl.Texture;
//import org.newdawn.slick.opengl.TextureLoader;
//import org.newdawn.slick.util.ResourceLoader;

public class HelloLWJGL {

	// The window handle
	private long window;

	public void run() {
		System.out.println("Hello LWJGL " + Version.getVersion() + "!");

		init();
		loop();

		// Free the window callbacks and destroy the window
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminate GLFW and free the error callback
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	Texture tex;
	Mesh m;
	private void init() {
		m = new Mesh();
		m.addVC(0, 0, 0);
		m.addVC(1, 0, 0);
		m.addVC(0, 1, 0);
		m.addVC(1, 1, 0);
		m.addTri(0, 1, 2);
		m.addTri(1, 2, 3);

		//TODO: fix
//		m.addVC(0, 0, 1);
//		m.addVC(1, 0, 1);
//		m.addVC(0, 1, 1);
//		m.addVC(1, 1, 1);
//		m.addTri(4, 5, 6);
//		m.addTri(5, 6, 7);
		
//		m.addVC(0, 0, 0);
//		m.addVC(0, 1, 0);
//		m.addVC(0, 0, 1);
//		m.addVC(0, 1, 1);
//		m.addTri(8,9,10);
//		m.addTri(9,10,11);
//
//		m.addVC(1, 0, 0);
//		m.addVC(1, 1, 0);
//		m.addVC(1, 0, 1);
//		m.addVC(1, 1, 1);
//		m.addTri(12,13,14);
//		m.addTri(13,14,15);
//		
//		m.addVC(0, 0, 0);
//		m.addVC(1, 0, 0);
//		m.addVC(0, 0, 1);
//		m.addVC(1, 0, 1);
//		m.addTri(16,17,18);
//		m.addTri(17,18,19);
//		
//		m.addVC(0, 1, 0);
//		m.addVC(1, 1, 0);
//		m.addVC(0, 1, 1);
//		m.addVC(1, 1, 1);
//		m.addTri(20,21,22);
//		m.addTri(21,22,23);
//		
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if (!glfwInit())
			throw new IllegalStateException("Unable to initialize GLFW");

		// Configure GLFW
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable

		// Create the window
		window = glfwCreateWindow(1000, 800, "Hello World!", NULL, NULL);
		if (window == NULL)
			throw new RuntimeException("Failed to create the GLFW window");

		// Setup a key callback. It will be called every time a key is pressed, repeated
		// or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if (key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE)
				glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
//			if (key == GLFW_KEY_1)
//				val -= 0.1;
//			if (key == GLFW_KEY_2)
//				val += 0.1;
//			if(glfwGetKey(window,GLFW_KEY_A)==GLFW_PRESS)curx+=0.1;
			if(key==GLFW_KEY_A&&action==GLFW_PRESS)xdir=+0.01f;
			if(key==GLFW_KEY_A&&action==GLFW_RELEASE)xdir=0;
			if(key==GLFW_KEY_D&&action==GLFW_PRESS)xdir=-0.01f;
			if(key==GLFW_KEY_D&&action==GLFW_RELEASE)xdir=0;
			
			if(key==GLFW_KEY_W&&action==GLFW_PRESS)zdir=+0.01f;
			if(key==GLFW_KEY_W&&action==GLFW_RELEASE)zdir=0;
			if(key==GLFW_KEY_S&&action==GLFW_PRESS)zdir=-0.01f;
			if(key==GLFW_KEY_S&&action==GLFW_RELEASE)zdir=0;
			
			if(key==GLFW_KEY_SPACE&&action==GLFW_PRESS)ydir=-0.01f;
			if(key==GLFW_KEY_SPACE&&action==GLFW_RELEASE)ydir=0f;
			
			
			if(key==GLFW_KEY_LEFT_SHIFT&&action==GLFW_PRESS)ydir=0.01f;
			if(key==GLFW_KEY_LEFT_SHIFT&&action==GLFW_RELEASE)ydir=0;
			
			if(key==GLFW_KEY_LEFT&&action==GLFW_PRESS)dry=-1f;
			if(key==GLFW_KEY_LEFT&&action==GLFW_RELEASE)dry=0f;
			
			if(key==GLFW_KEY_RIGHT&&action==GLFW_PRESS)dry=1f;
			if(key==GLFW_KEY_RIGHT&&action==GLFW_RELEASE)dry=0;
		});

		// Get the thread stack and push a new frame
		try (MemoryStack stack = stackPush()) {
			IntBuffer pWidth = stack.mallocInt(1); // int*
			IntBuffer pHeight = stack.mallocInt(1); // int*

			// Get the window size passed to glfwCreateWindow
			glfwGetWindowSize(window, pWidth, pHeight);

			// Get the resolution of the primary monitor
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

			// Center the window
			glfwSetWindowPos(window, (vidmode.width() - pWidth.get(0)) / 2, (vidmode.height() - pHeight.get(0)) / 2);
		} // the stack frame is popped automatically

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
		Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {

			@Override
			public void run() {
				System.out.println("Exiting");
				// tex.release();
//				System.out.println("Textures released");
			}
		}));
	}
	float xdir=0,ydir=0,zdir=0;
	float curx=0,cury=0,curz=0;
	float rotx=0;
	float roty=0;
	float rotz=0;
	float drx=0,dry=0,drz=0;
	
	private void loop() {
		// This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();

		// Set the clear color
		glClearColor(0.25f, 0.25f, 0.25f, 0f);

		// Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while (!glfwWindowShouldClose(window)) {
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer
			
			// set the color of the quad (R,G,B,A)
			// glColor3f(0.5f,0.5f,1.0f);
			// glBegin(GL_TRIANGLES);
			// glVertex2f(0.00f, 0.00f);
			// glVertex2f(0.300f, 0.400f);
			// glVertex2f(0.100f, 0.400f);

			// glVertex2f(-1,-1);
			// glVertex2f(1,-1);
			// glVertex2f(1,1);
			// glEnd();
			GL11.glPushMatrix();
			curx+=xdir;
			cury+=ydir;
			curz+=zdir;
			rotx+=drx;
			roty+=dry;
			rotz+=drz;
			System.out.println(curx+" "+cury+" "+curz+"  "+xdir+" "+ydir+" "+zdir+"  "+rotx+" "+roty+" "+rotz+"  "+drx+" "+dry+" "+drz);
			glTranslatef(0f,0f,1f);
			glRotatef(-15,0,0,1);
//			glRotatef(-45,1,0,0);
//			glRotatef(-45,0,1,0);
//			glRotatef(rotx,1,0,0);
//			glRotatef(roty,0,1,0);
//			glRotatef(rotz,0,0,1);
//			glTranslatef(curx,cury,curz);
//			Matrix4f matrix = new Matrix4f();
//	         matrix.m00 = side.x;
//	         matrix.m10 = side.y;
//	         matrix.m20 = side.z;
//	         matrix.m01 = up.x;
//	         matrix.m11 = up.y;
//	         matrix.m21 = up.z;
//	         matrix.m02 = -forward.x;
//	         matrix.m12 = -forward.y;
//	         matrix.m22 = -forward.z;
			
			glBegin(GL_TRIANGLES);
			m.glBind();
			glEnd();
			glFrontFace(GL_CULL_FACE);
			
			GL11.glPopMatrix();
			glfwSwapBuffers(window); // swap the color buffers

			// Poll for window events. The key callback above will only be
			// invoked during this call.
			glfwPollEvents();
		}
	}

	float val = 0;

	public static void main(String[] args) {
		new HelloLWJGL().run();
	}

}