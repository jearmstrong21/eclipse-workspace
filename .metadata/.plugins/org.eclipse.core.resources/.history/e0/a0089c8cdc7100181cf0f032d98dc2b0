package co.megadodo.hellojogamp;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import com.jogamp.opengl.GL4;

public class ShaderProgram {
	
	public ShaderProgram() {
		
	}
	
	public static int compileShader(GL4 gl, int type, String typeStr, String source) {
		int shaderID=gl.glCreateShader(type);
		gl.glShaderSource(shaderID, 1, new String[] {source}, null);
		gl.glCompileShader(shaderID);
		IntBuffer buffer=IntBuffer.allocate(1);
		gl.glGetShaderiv(shaderID, GL4.GL_COMPILE_STATUS, buffer);
		if(buffer.get(0)==GL4.GL_FALSE) {
			ByteBuffer infoBuffer=ByteBuffer.allocate(512);
			gl.glGetShaderInfoLog(shaderID, 512, null, infoBuffer);
			for(int i=0;i<infoBuffer.capacity();i++) {
				System.out.print((char)infoBuffer.get(i));
			}
			System.out.println();
			return -1;
		}
		return shaderID;
	}
	
	public static int compileProgram(GL4 gl, int vert, int frag) {
		int program=gl.glCreateProgram();
		gl.glAttachShader(program, vert);
		gl.glAttachShader(program, frag);
		gl.glLinkProgram(program);
		gl.glDeleteShader(vert);
		gl.glDeleteShader(frag);
		return program;
	}

}
