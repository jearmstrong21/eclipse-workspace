package co.megadodo.shaderfun;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL3;

public class Shader {

	private static int makeShader(GL3 gl, int type, String typeStr, String source) {
		int shaderID = gl.glCreateShader(type);
		gl.glShaderSource(shaderID, 1, new String[] {source}, null);
		gl.glCompileShader(shaderID);
		IntBuffer bufferCompile=IntBuffer.allocate(1);
		gl.glGetShaderiv(shaderID, GL3.GL_COMPILE_STATUS, bufferCompile);
		if(bufferCompile.get(0)==GL3.GL_FALSE) {
			IntBuffer bufferLogLength=IntBuffer.allocate(1);
			gl.glGetShaderiv(shaderID, GL3.GL_INFO_LOG_LENGTH, bufferLogLength);
			int logLen=bufferLogLength.get(0);
			if(logLen>0) {
				ByteBuffer bufferLog=ByteBuffer.allocate(logLen);
				IntBuffer bufferWritten=IntBuffer.allocate(1);//TODO: not needed
				gl.glGetShaderInfoLog(shaderID, logLen, bufferWritten, bufferLog);
				for(int i=0;i<logLen;i++) {
					System.out.print((char)bufferLog.get(i));
				}
			}
		}
		return shaderID;
	}

	public int programID;
	public String vertCode;
	public String fragCode;
	public String vertFileName;
	public String fragFileName;

	public Shader() {

	}

	public void loadFiles() {
		vertCode = FileUtils.loadFile(vertFileName);
		fragCode = FileUtils.loadFile(fragFileName);
	}

	public void genProgram(GL3 gl) {
		
	}

	public void useProgram(GL3 gl) {
		gl.glUseProgram(programID);
	}

	public void deleteProgram(GL3 gl) {
		gl.glDeleteProgram(programID);
	}

}
