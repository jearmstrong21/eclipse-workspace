package co.megadodo.voronoidelaunay;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class VoronoiDelaunay extends JPanel implements MouseListener {

	public static void main(String[] args) {
		new VoronoiDelaunay();
	}

	public JFrame drawFrame;

	public JFrame uiFrame;

	
	public JTabbedPane tbpAll;
		public JPanel pnlDisplaySettings;
			public JPanel pnlPointSize;
				public JLabel lblPointSize;
				public JSlider sldPointSize;
//			public JPanel pnlPointCol;
//				public JLabel lblPointCol;
//				public JColorChooser ccPointCol;
			public JPanel pnlCCenterSize;
				public JLabel lblCCenterSize;
				public JSlider sldCCenterSize;
			public JPanel pnlDrawCCirc;
				public JLabel lblDrawCCirc;
				public JCheckBox cbxDrawCCirc;
//			public JPanel pnlCCenterCol;
//				public JLabel lblCCenterCol;
//				public JSlider sldCCenterCol;

	public VoronoiDelaunay() {
		drawFrame = new JFrame("Voronoi / Delaunay");
		drawFrame.setSize(500, 500);
		drawFrame.add(this);
		drawFrame.setVisible(true);
		this.addMouseListener(this);

		uiFrame = new JFrame("Voronoi / Delaunay");
		uiFrame.setSize(500, 500);
		uiFrame.setVisible(true);

			tbpAll = new JTabbedPane();
				pnlDisplaySettings = new JPanel();
				pnlDisplaySettings.setLayout(new GridLayout(2,1));
					pnlPointSize = new JPanel();
						lblPointSize = new JLabel("Point size: ");
						sldPointSize = new JSlider(0, 15, 3);
					pnlPointSize.add(lblPointSize);
					pnlPointSize.add(sldPointSize);
					
//					pnlPointCol = new JPanel();
//						lblPointCol = new JLabel("Point color: ");
//						ccPointCol = new JColorChooser(Color.BLACK);
//					pnlPointCol.add(lblPointCol);
//					pnlPointCol.add(ccPointCol);
//					
					pnlCCenterSize = new JPanel();
						lblCCenterSize = new JLabel("Circumcenter size: ");
						sldCCenterSize = new JSlider(0, 15, 0);
					pnlCCenterSize.add(lblCCenterSize);
					pnlCCenterSize.add(sldCCenterSize);

				pnlDisplaySettings.add(pnlPointSize);
				pnlDisplaySettings.add(pnlCCenterSize);
			tbpAll.addTab("Display settings", pnlDisplaySettings);
			
		uiFrame.add(tbpAll);

		
		addUIListeners();
		
		for(int i = 0; i < 200; i++) {
			points.add(new Vector2f(rand(0,500),rand(0,500)));
		}
		triangulate();
	}
	
	void triangulate() {
		tris.clear();
		tris.addAll(Triangulator.triangulation(points));
	}
	
	float rand(float mi, float ma) {
		return (float)(Math.random()*(ma-mi)+mi);
	}
	
	public void addUIListeners() {
		ChangeListener changeListener = new ChangeListener() {
			
			@Override
			public void stateChanged(ChangeEvent arg0) {
				repaint();
			}
		};
		sldPointSize.addChangeListener(changeListener);
//		ccPointCol.addChange
		sldCCenterSize.addChangeListener(changeListener);
	}

	ArrayList<Vector2f> points = new ArrayList<Vector2f>();
	ArrayList<Triangle> tris = new ArrayList<Triangle>();

	public void paint(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;

		g2d.setColor(Color.WHITE);
		g2d.fillRect(0, 0, 500, 500);

		for (Triangle t : tris) {
			ArrayList<Vector2f> list = new ArrayList<Vector2f>();
			list.add(t.a);
			list.add(t.b);
			list.add(t.c);
			boolean cont = false;
			for (Vector2f v : list) {
				if (Vector2f.isSame(v, Triangulator.bad1) || Vector2f.isSame(v, Triangulator.bad2)
						|| Vector2f.isSame(v, Triangulator.bad3)) {
					cont = true;
				}
			}
			if (cont)
				continue;

			g2d.setColor(Color.BLACK);
			Line.draw(g2d, t.a, t.b);
			Line.draw(g2d, t.b, t.c);
			Line.draw(g2d, t.a, t.c);

			 Vector2f cc = t.circumcenter();
			 float cr = t.circumrad();
			 
			 int cx = (int) cc.x;
			 int cy = (int) cc.y;
			 int icr = (int) cr;
			 
			 int displayCR = sldCCenterSize.getValue();
			 
			 g2d.setColor(Color.GREEN);
			 g2d.fillOval(cx - displayCR/2, cy - displayCR/2, displayCR, displayCR);

			// g2d.setColor(Color.RED);
			// Line b1 = Line.bisector(t.lineAB(),4);
			// Line b2 = Line.bisector(t.lineBC(),4);
			// Line b3 = Line.bisector(t.lineAC(),4);
			// Line.draw(g2d, b1);
			// Line.draw(g2d, b2);
			// Line.draw(g2d, b3);
			//
			// g2d.setColor(Color.MAGENTA);
			// int x = (int)cc.x;
			// int y = (int)cc.y;
			// int r = (int)cr;
			// g2d.drawOval(x - r, y - r, r * 2, r * 2);
		}
		for (Vector2f p : points) {
			g2d.setColor(Color.BLACK);
			int r = sldPointSize.getValue();
			g2d.fillOval((int)p.x-r, (int)p.y-r, r*2, r*2);
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		points.add(new Vector2f(e.getX(), e.getY()));
		triangulate();
		repaint();
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}