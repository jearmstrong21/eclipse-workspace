package co.megadodo.shaderfun;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL3;

public class Shader {
	
	public static int makeShader(GL3 gl3, int type, String source) {
		int shaderID=gl3.glCreateShader(type);
		gl3.glShaderSource(shaderID, 1, new String[] {source}, null);
		gl3.glCompileShader(shaderID); 
		IntBuffer intBuffer=IntBuffer.allocate(1);
        gl3.glGetShaderiv(shaderID,gl3.GL_COMPILE_STATUS,intBuffer); 
        System.out.println("glCompileShader(fragment)="+intBuffer.get(0)); 
        
        if(intBuffer.get(0)==GL.GL_FALSE){ 
            gl.glGetProgramiv(shaderprogram, GL.GL_INFO_LOG_LENGTH, intBuffer); 
            
            int size = intBuffer.get(0); 
            if (size > 0) { 
                ByteBuffer byteBuffer = ByteBuffer.allocate(size); 
                gl.glGetProgramInfoLog(shaderprogram, size, intBuffer, byteBuffer); 
                for (byte b : byteBuffer.array()) { 
                    System.err.print((char) b); 
                } 
            } else { 
                System.out.println("Unknown"); 
            } 
        } 
		return shaderID;
	}
	
	public int programID;
	public String vertCode;
	public String fragCode;
	public String vertFileName;
	public String fragFileName;
	
	public Shader() {
		
	}
	
	public void loadFiles() {
		vertCode=FileUtils.loadFile(vertFileName);
		fragCode=FileUtils.loadFile(fragFileName);
	}
	
	public void genProgram() {
		
	}

}
