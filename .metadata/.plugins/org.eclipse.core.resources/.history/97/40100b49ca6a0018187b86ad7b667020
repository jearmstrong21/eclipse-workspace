package co.megadodo.lwjglswingshaderfun;

import static org.lwjgl.opengl.GL20.GL_COMPILE_STATUS;
import static org.lwjgl.opengl.GL20.GL_FRAGMENT_SHADER;
import static org.lwjgl.opengl.GL20.GL_INFO_LOG_LENGTH;
import static org.lwjgl.opengl.GL20.GL_VERTEX_SHADER;
import static org.lwjgl.opengl.GL20.glCompileShader;
import static org.lwjgl.opengl.GL20.glCreateShader;
import static org.lwjgl.opengl.GL20.glGetShaderInfoLog;
import static org.lwjgl.opengl.GL20.glGetShaderi;
import static org.lwjgl.opengl.GL20.glShaderSource;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import org.lwjgl.opengl.GL11;

public class Shader {
	
	public long programID;
	public static String loadFile(String fileName) {
		String str="";
		Scanner sc;
		try {
			sc = new Scanner(new File(fileName));
		} catch (FileNotFoundException fnfe) {
			fnfe.printStackTrace();
			return null;
		}
		while(sc.hasNextLine()) {
			str+=sc.nextLine();
		}
		sc.close();
		return str;
	}
	public static int compileShaderSource(int shaderType, String source) {
		int shader=glCreateShader(shaderType);
		glShaderSource(shader, source);
		glCompileShader(shader);
		String infoLog=glGetShaderInfoLog(shader,glGetShaderi(shader, GL_INFO_LOG_LENGTH));
		String strType="None";
		if(infoLog!=null&&infoLog.trim().length()!=0) {
			if(shaderType==GL_FRAGMENT_SHADER)strType="Fragment";
			if(shaderType==GL_VERTEX_SHADER)strType="Vertex";
		}
		if(glGetShaderi(shader, GL_COMPILE_STATUS)==GL11.GL_FALSE) {
			throw new RuntimeException("Failure in compiling "+strType+": "+infoLog);
		}
		return shader;
	}
	
}
