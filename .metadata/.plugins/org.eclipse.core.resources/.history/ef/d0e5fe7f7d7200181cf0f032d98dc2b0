package co.megadodo.hellojogamp;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import com.jogamp.opengl.GL4;

public class VAO {

	public int vao;
	public int vbo;
	public int ebo;

	public VAO() {

	}

	public FloatBuffer allData;
	public IntBuffer triData;

	public void genBuffers(GL4 gl,float[]posArr,int[]triArr) {//x,y,z,r,g,b,x,y,z,r,g,b,x,y,z,r,g,b...
		this.allData=FloatBuffer.wrap(posArr);
		this.triData=IntBuffer.wrap(triArr);
		
		IntBuffer vaoBuffer=IntBuffer.allocate(1);
		gl.glGenVertexArrays(1, vaoBuffer);
		vao=vaoBuffer.get(0);
		
		IntBuffer vboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, vboBuffer);
		vbo=vboBuffer.get(0);
		
		IntBuffer eboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, eboBuffer);
		ebo=eboBuffer.get(0);
		
		gl.glBindVertexArray(vao);
		gl.glBindBuffer(GL4.GL_ARRAY_BUFFER, vbo);
        
        gl.glBufferData(GL4.GL_ARRAY_BUFFER, posArr.length*Float.BYTES, allData, GL4.GL_STATIC_DRAW);
        
        gl.glBindBuffer(GL4.GL_ELEMENT_ARRAY_BUFFER, ebo);
        gl.glBufferData(GL4.GL_ELEMENT_ARRAY_BUFFER, triArr.length*Integer.BYTES, triData, GL4.GL_STATIC_DRAW);
        
        // vertex positions
        int vertSize=3;
        gl.glEnableVertexAttribArray(0);
        gl.glVertexAttribPointer(0, 3, GL4.GL_FLOAT, false, vertSize, 0);
        // vertex normals
//        gl.glEnableVertexAttribArray(1);
//        gl.glVertexAttribPointer(1, 3, GL4.GL_FLOAT, false, sizeof(Vertex), (void*)offsetof(Vertex, col));
        // vertex texture coords
//        gl.glEnableVertexAttribArray(2);
//        gl.glVertexAttribPointer(2, 2, GL4.GL_FLOAT, false, sizeof(Vertex), (void*)offsetof(Vertex, uv));
        
        gl.glBindVertexArray(0);
	}

	public void render(GL4 gl) {
		gl.glBindVertexArray(vao); // seeing as we only have a single vao there's no need to bind it every time, but we'll do so to keep things a bit more organized
        //glDrawArrays(GL_TRIANGLES, 0, 6);
        gl.glDrawElements(GL4.GL_TRIANGLES, triData.capacity(), GL4.GL_UNSIGNED_INT, 0);
        gl.glBindVertexArray(0);
	}

}
