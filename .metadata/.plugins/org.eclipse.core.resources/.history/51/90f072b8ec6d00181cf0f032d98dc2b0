package co.megadodo.shaderfun;

import com.jme3.app.SimpleApplication;
import com.jme3.asset.plugins.FileLocator;
import com.jme3.material.Material;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.Mesh;
import com.jme3.scene.VertexBuffer;
import com.jme3.system.AppSettings;
import com.jme3.util.BufferUtils;

public class ShaderFun extends SimpleApplication {

	@Override
	public void simpleInitApp() {
//		assetManager.registerLocator("/", FileLocator.class);
		mat=new Material(assetManager, "~/Documents/eclipse-workspace/JME3SwingShaderFun/assets/SolidColor.j3md");
		mesh=new Mesh();
		mesh.setBuffer(VertexBuffer.Type.Position,3,BufferUtils.createFloatBuffer(new Vector3f(-1,-1,0),new Vector3f(-1,1,0),new Vector3f(1,1,0),new Vector3f(1,-1,0)));
		mesh.setBuffer(VertexBuffer.Type.Index,3,BufferUtils.createIntBuffer(0,1,2,0,1,3));
		geo=new Geometry("Geo",mesh);
		geo.setMaterial(mat);
		rootNode.attachChild(geo);
	}
	
	Mesh mesh;
	Material mat;
	Geometry geo;
	
	@Override
	public void simpleUpdate(float tpf) {
		
	}
	
	public static void main(String[]args) {
		AppSettings settings=new AppSettings(true);
		settings.setMinWidth(500);
		settings.setMinHeight(500);
		settings.setFrameRate(60);
		settings.setResizable(false);
		settings.setFullscreen(false);
		settings.setWidth(500);
		settings.setHeight(500);
		settings.setTitle("Shader Fun");
		ShaderFun sf=new ShaderFun();
		sf.settings=settings;
		sf.showSettings=false;
		sf.start();
	}
	

}
