package co.megadodo.hellojogamp;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import com.jogamp.opengl.GL4;

public class VAO {

	public int vao;
	public int vbo;
	public int ebo;
	
	public VAO() {
		
	}
	
	public FloatBuffer allData;
	public IntBuffer triData;
	
	public void genBuffers(GL4 gl,FloatBuffer allData, IntBuffer triData) {//x,y,z,r,g,b,x,y,z,r,g,b,x,y,z,r,g,b...
		this.allData=allData;
		this.triData=triData;
		
		IntBuffer vaoBuffer=IntBuffer.allocate(1);
		gl.glGenVertexArrays(1, vaoBuffer);
		vao=vaoBuffer.get(0);
		
		IntBuffer vboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, vboBuffer);
		vbo=vboBuffer.get(0);
		
		IntBuffer eboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, eboBuffer);
		ebo=eboBuffer.get(0);
		
		gl.glBindVertexArray(vao);
		
		gl.glBindBuffer(GL4.GL_ARRAY_BUFFER, vbo);
		gl.glBufferData(GL4.GL_ARRAY_BUFFER, allData.capacity()*Float.BYTES, allData, GL4.GL_STATIC_DRAW);//continue on with this	
		
		gl.glBindBuffer(GL4.GL_ELEMENT_ARRAY_BUFFER, ebo);
		gl.glBufferData(GL4.GL_ELEMENT_ARRAY_BUFFER, triData.capacity()*Integer.BYTES, triData, GL4.GL_STATIC_DRAW);
		
		int stride=3;
		
		gl.glEnableVertexAttribArray(0);
		gl.glVertexAttribPointer(0, 3, GL4.GL_FLOAT,false, stride, 0);
		
//		gl.glEnableVertexAttribArray(1);
//		gl.glVertexAttribPointer(1, 3, GL4.GL_FLOAT,false, stride, 3);
		
		gl.glBindVertexArray(0);
	}
	
	public void render(GL4 gl) {
		gl.glBindVertexArray(vao);
		gl.glDrawElements(GL4.GL_TRIANGLES, triData.capacity(), GL4.GL_UNSIGNED_INT, 0);
		gl.glBindVertexArray(0);
	}
	
}
