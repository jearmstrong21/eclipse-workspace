package co.megadodo.shaderfun;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL3;

public class VertexBuffer {
	
	public int vao;
	public int vbo;
	public int ebo;
	public FloatBuffer floats;
	public IntBuffer tris;
	
	public VertexBuffer() {
		
	}
	
	public void genBuffers(GL3 gl,FloatBuffer fs,IntBuffer ts) {
		floats=fs;
		tris=ts;
		IntBuffer vaoBuffer=IntBuffer.allocate(1);
		gl.glGenVertexArrays(1, vaoBuffer);
		vao=vaoBuffer.get(0);
		
		IntBuffer vboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, vboBuffer);
		vbo=vboBuffer.get(0);
		
		IntBuffer eboBuffer=IntBuffer.allocate(1);
		gl.glGenBuffers(1, eboBuffer);
		ebo=eboBuffer.get(0);
		
		gl.glBindVertexArray(vao);
		
		gl.glBindBuffer(GL3.GL_ARRAY_BUFFER, vbo);
		gl.glBufferData(GL3.GL_ARRAY_BUFFER, floats.capacity(), floats, GL3.GL_STATIC_DRAW);//all floats
		
		gl.glBindBuffer(GL3.GL_ELEMENT_ARRAY_BUFFER,	 ebo);
		gl.glBufferData(GL3.GL_ELEMENT_ARRAY_BUFFER, tris.capacity(), tris, GL3.GL_STATIC_DRAW);
		//point opengl to certain points in buffer
		gl.glVertexAttribPointer(0,3,GL3.GL_FLOAT,false,3,0);//3 is number of floats per vertex, 0 is the index of the first element in this attribute pointer
		
		
		gl.glBindBuffer(GL3.GL_ARRAY_BUFFER, 0);
		gl.glBindVertexArray(0);
	}
	
	public void bindBuffers(GL3 gl) {
		gl.glBindVertexArray(vao);
		gl.glDrawElements(GL3.GL_TRIANGLES, tris.capacity(), GL3.GL_UNSIGNED_INT, 0);
		gl.glBindVertexArray(0);
	}
	
	public void deleteBuffers(GL3 gl) {
		gl.glDeleteVertexArrays(1, IntBuffer.wrap(new int[] {vao}));
		gl.glDeleteBuffers(2, IntBuffer.wrap(new int[] {vbo,ebo}));
	}

}
