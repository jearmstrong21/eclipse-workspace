package co.megadodo.hellojogamp;

import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.util.FPSAnimator;

public class HelloJOGAMP implements GLEventListener {
	
	double theta=0;
	float[]xs,ys,zs;
	public static void main(String[]args) {
		GLProfile glp=GLProfile.getDefault();
		GLCapabilities caps=new GLCapabilities(glp);
		GLCanvas canvas=new GLCanvas(caps);
		Frame frame=new Frame("Spinning Triangle");
		frame.setSize(400,400);
		frame.add(canvas);
		frame.setVisible(true);
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		canvas.addGLEventListener(new HelloJOGAMP());
		FPSAnimator animator=new FPSAnimator(canvas, 60);
//		animator.add(canvas);
		animator.start();
	}
	
	public void display(GLAutoDrawable drawable) {
		update();
		render(drawable);
	}
	
	public void dispose(GLAutoDrawable drawable) {
		
	}
	
	public void init(GLAutoDrawable drawable) {
		xs=new float[] {-0.5f,0,0.5f};
		ys=new float[] {0f,-0.5f,0.5f};
		zs=new float[] {0.5f,0,-0.5f};
//		xs=new float[] {1,0,1};
//		ys=new float[] {0,1,1};
//		zs=new float[] {0,0,1};
	}
	
	public void reshape(GLAutoDrawable drawable,int x,int y,int w,int h) {
		
	}
	
	public void update() {
		
	}
	float y(float x,float z) {
		return (float)osn.eval(x,z)*2;
	}
	OpenSimplexNoise osn=new OpenSimplexNoise((long)(Long.MAX_VALUE*Math.random()));
	public void render(GLAutoDrawable drawable) {
		GL2 gl=drawable.getGL().getGL2();
		gl.glClearColor(0.25f, 0.25f, 0.25f, 0f);
		gl.glClear(GL.GL_COLOR_BUFFER_BIT);
		gl.glPushMatrix();
		gl.glTranslatef(0f,1f,0f);
		gl.glRotatef()
		float inc=0.1f;
		for(float x=0;x<3;x+=inc) {
			for(float z=0;z<3;z+=inc) {
				gl.glBegin(GL.GL_TRIANGLES);
				float _00=y(x,z);
				float _01=y(x,z+inc);
				float _10=y(x+inc,z);
				float _11=y(x+inc,z+inc);
				gl.glVertex3f(x,_00,z);
				gl.glVertex3f(x, _01, z+inc);
				gl.glVertex3f(x+inc,_10,z);
				gl.glEnd();
			}
		}
		gl.glPopMatrix();
	}

}
