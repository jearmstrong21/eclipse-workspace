package co.megadodo.shaderfun;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import javax.media.opengl.GL3;

public class Shader {

	private static int makeShader(GL3 gl, int type, String typeStr, String source) {
		int shaderID = gl.glCreateShader(type);
		gl.glShaderSource(shaderID, 1, new String[] { source }, null);
		gl.glCompileShader(shaderID);
		IntBuffer intBuffer = IntBuffer.allocate(1);
		gl.glGetShaderiv(shaderID, GL3.GL_COMPILE_STATUS, intBuffer);
		int elem0=intBuffer.get(0);
		System.out.println("glCompileShader("+typeStr+") is good =" + (elem0==GL3.GL_FALSE?"false":"true"));

		if(elem0==GL3.GL_FALSE) {
			System.out.println("Retrieving info log");
			IntBuffer sizeBuffer=IntBuffer.allocate(1);
			gl.glGetShaderiv(shaderID, GL3.GL_INFO_LOG_LENGTH, sizeBuffer);
			int size=sizeBuffer.get(0);
			System.out.println("Info log length from GL: "+size);
			ByteBuffer logBuffer=ByteBuffer.allocate(size);
			gl.glGetShaderInfoLog(shaderID, size, null, logBuffer);
			System.out.println();
			for(int i=0;i<size;i++) {
				System.out.print((char)logBuffer.get(i));
			}
			System.out.println();
		}
		
		
		return shaderID;
	}

	public int programID;
	public String vertCode;
	public String fragCode;
	public String vertFileName;
	public String fragFileName;

	public Shader() {

	}

	public void loadFiles() {
		vertCode = FileUtils.loadFile(vertFileName);
		fragCode = FileUtils.loadFile(fragFileName);
	}

	public void genProgram(GL3 gl) {
		int vert=makeShader(gl,GL3.GL_VERTEX_SHADER,"VERTEX",vertCode);
		int frag=makeShader(gl,GL3.GL_FRAGMENT_SHADER,"FRAGMENT",fragCode);
		programID=gl.glCreateProgram();
		gl.glAttachShader(programID, vert);
		gl.glAttachShader(programID, frag);
		gl.glLinkProgram(programID);
		gl.glDeleteShader(vert);
		gl.glDeleteShader(frag);
	}
	
	public void useProgram(GL3 gl) {
		gl.glUseProgram(programID);
	}
	
	public void deleteProgram(GL3 gl) {
		gl.glDeleteProgram(programID);
	}

}
